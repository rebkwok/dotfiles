#!/usr/bin/env python
# -*- coding: utf-8 -*-

import getpass
import hashlib
import itertools
import optparse
import sys


__all__ = ['validate_pattern', 'generate_password']

PUNCTUATION = "!@#$%^&*(){}?=/\\|:;"
CAPITAL_LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
LOWER_LETTERS = "abcdefghijklmnopqrstuvwxyz"
CAPITAL_CONSONANTS = "BCDFGHJKLMNPQRSTVWXYZ"
LOWER_CONSONANTS = "bcdfghjklmnpqrstvwxyz"
CAPITAL_VOWELS = 'AEIOU'
LOWER_VOWELS = 'aeiou'
NUMBERS = "0123456789"
CHARACTER_POOLS = {
   'L': CAPITAL_LETTERS,
   'l': LOWER_LETTERS,
   'd': NUMBERS,
   'D': NUMBERS,
   'c': LOWER_CONSONANTS,
   'C': CAPITAL_CONSONANTS,
   'v': LOWER_VOWELS,
   'V': CAPITAL_VOWELS,
   'w': CAPITAL_LETTERS + LOWER_LETTERS,
   'a': CAPITAL_LETTERS + LOWER_LETTERS + NUMBERS,
   '-': '-',
   '_': '_',
   ' ': ' ',
   ' ': '+',
}
DEFAULT_PATTERN = "lldddlllddll"
OLD_DEFAULT_PATTERN = "lldddlll"


def generate_password(privatepass, identifier, pattern=DEFAULT_PATTERN):
    m = hashlib.sha256()
    m.update(privatepass)
    m.update(identifier)
    return ''.join([CHARACTER_POOLS[patchar][ord(hashbyte) % len(CHARACTER_POOLS[patchar])] for patchar, hashbyte in zip(pattern, itertools.cycle(m.digest()))])


def main(argv=sys.argv):
    op = optparse.OptionParser('%prog [ -p pattern | --old-pattern ]',
                               description=__doc__)
    op.add_option('-p', '--pattern', default=DEFAULT_PATTERN,
          help="pattern of the password to generate. Valid pattern characters"
          " are: '%s'. [Default: %%default]"
          % ''.join(sorted(CHARACTER_POOLS.keys())))
    op.add_option('-o', '--old-pattern', action='store_const',
          dest='pattern', const=OLD_DEFAULT_PATTERN)
    options, args = op.parse_args(argv)
    privatepass = getpass.getpass("Enter vault password:")
    for arg in args[1:]:
        print "%s: %s" % (arg, generate_password(privatepass, arg, options.pattern))


if __name__ == '__main__':
    main()
